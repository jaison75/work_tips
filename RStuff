# general purpose somamer parse
junk <- c("C5orf38.6378.2.3", "C5orf63.13378.80.3", "C8A.C8B.C8G.2429.27.4" )
pattern <- "^(.*)?\\.(\\d+)?\\.(\\d+)?\\.(\\d+)?$"
gsub( pattern, "anti-\\2-\\3", junk)


data.table
https://s3.amazonaws.com/assets.datacamp.com/img/blog/data+table+cheat+sheet.pdf
http://brooksandrew.github.io/simpleblog/articles/advanced-data-table/


#Banded background for categorical axes
rects <- data.frame(xstart = seq(0.5,9.5,1), xend = seq(1.5,10.5,1), 
         col = letters[1:10])
ggplot() + geom_point(data=top.votes.by.director.country, 
                      aes(x=country, y=director.rank)) +
           geom_rect(data=rects, aes(ymin=0, ymax=80, xmin=xstart,
                      xmax=xend, fill=col), alpha =0.5) + coord_flip()
                      
                      
 # banding with with ggforestplot                     
 g +
  # Add custom theme
  theme_forest() +
  # Add striped background
  geom_stripes(odd = "#33333333", even = "#00000000") +
  # Add vertical line at null point
  geom_vline(
    xintercept = 0,
    linetype = "solid",
    size = 0.4,
    colour = "black"
  )

# color facets by pheno
plot_clin <- function(d.f, x_var, y_var, colVar, grpVar,
                      facet_var="facet", facet_col = "liver_pheno",
                      ncol=11, x_log =TRUE, y_log = TRUE,
                      x_breaks = c(20,40,80,60), y_breaks = c(20,40,80,60)) {

  d.f$facet_var <- d.f[[ facet_var ]]
  f <- ggplot(d.f, aes_string(x=x_var, y= y_var, color = colVar, group=grpVar))
  f <- f + geom_point() + geom_line(color = "grey60",alpha = 0.2) + facet_wrap( ~ facet_var , ncol=ncol)
  f <- f + theme_jj_ppt1(base_size=10)

  if ( x_log )  {
    f <- f + scale_x_log10(breaks = x_breaks)
  } else {
    f <- f + scale_x_continuous(breaks = x_breaks)
  }

  if ( y_log )  {
    f <- f + scale_y_log10(breaks = y_breaks)
  } else {
    f <- f + scale_y_continuous(breaks = y_breaks)
  }

  f <- f + guides(color = guide_legend(title = "Time", title.position = "top"))

  dummy <- ggplot(d.f, aes_string(x = x_var, y = y_var))+ facet_wrap(~facet_var, ncol = ncol) +
      geom_rect(aes_string(fill=facet_col), xmin=-Inf, xmax=Inf, ymin=-Inf, ymax=Inf) +
      theme_minimal()

  g1 <- ggplotGrob(f)
  g2 <- ggplotGrob(dummy)

  gtable_select <- function (x, ...)
   {
    matches <- c(...)
    x$layout <- x$layout[matches, , drop = FALSE]
    x$grobs <- x$grobs[matches]
    x
  }

  panels <- grepl(pattern="panel", g2$layout$name)
  strips <- grepl(pattern="strip_t", g2$layout$name)
  g2$layout$t[panels] <- g2$layout$t[panels] - 1
  g2$layout$b[panels] <- g2$layout$b[panels] - 1

  new_strips <- gtable_select(g2, panels | strips)
  #grid.newpage()
  #grid.draw(new_strips)

  gtable_stack <- function(g1, g2){
    g1$grobs <- c(g1$grobs, g2$grobs)
    g1$layout <- transform(g1$layout, z= z-max(z), name="g2")
    g1$layout <- rbind(g1$layout, g2$layout)
    g1
  }
  ## ideally you'd remove the old strips, for now they're just covered
  new_plot <- gtable_stack(g1, new_strips)
  return(new_plot)
}

# How I installed magick.
## First install ImageMagick (local install on unix server)
 cd installs/
 wget https://www.imagemagick.org/download/ImageMagick-6.9.9-20.tar.gz
 tar -xzvf ImageMagick-6.9.9-20.tar.gz
 cd ImageMagick-6.9.9-20/
 ./config --prefix=/home/jacobja9/ImageMagick-6.9.9-20
 make
 make install
## Added following lines to .bashrc
 export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/home/jacobja9/ImageMagick-6.9.9-20/lib
 export PATH="/home/jacobja9/ImageMagick-6.9.9-20/bin:$PATH"
 export PKG_CONFIG_PATH="/home/jacobja9/ImageMagick-6.9.9-20/lib/pkgconfig:$PGK_CONFIG_PATH"
## in R
 devtools::install_github("ropensci/magick",force=TRUE)

# odds ratio from glm
if you want to interpret the estimated effects as relative odds ratios, just do exp(coef(x)) (gives you eβeβ, the multiplicative change in the odds ratio for y=1y=1 if the covariate associated with ββ increases by 1). For profile likelihood intervals for this quantity, you can do
require(MASS)
x = glm(Outcome ~ Age, family=binomial(link="logit"))
exp(cbind(coef(x), confint(x)))  
https://stats.stackexchange.com/questions/8661/logistic-regression-in-r-odds-ratio

# When install.packages runs into Rcpp lock errors
/home/jacobja9/R/x86_64-pc-linux-gnu-library/3.4/00LOCK-Rcpp
https://stackoverflow.com/questions/14382209/r-install-packages-returns-failed-to-create-lock-directory

# conf int from fit 95% ci = 2.5 to 97.5
exp(parameter estimate  + se of parameter estimate*c(-1,0,1)*qt(0.975, df) )

# What if you want to return summaries that are not just a single number?
https://github.com/jennybc/row-oriented-workflows/blob/master/ex07_group-by-summarise.md

# Fit a model to each country and look at dot plots of slope and intercept.
https://github.com/jennybc/row-oriented-workflows/blob/master/ex08_nesting-is-good.md

# Split with unused levels
https://github.com/jennybc/row-oriented-workflows/blob/master/ex08_nesting-is-good.md

# Split-Apply-Combine 
https://coolbutuseless.bitbucket.io/2018/03/03/split-apply-combine-my-search-for-a-replacement-for-group_by---do/


